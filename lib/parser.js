module.exports = ( function () {

"use strict";
/*
 * Generated by WikiPEG
 */



function peg$subclass(child, parent) {
  function ctor() { this.constructor = child; }
  ctor.prototype = parent.prototype;
  child.prototype = new ctor();
}

function peg$SyntaxError(message, expected, found, location) {
  this.message  = message;
  this.expected = expected;
  this.found    = found;
  this.location = location;

  this.name     = "SyntaxError";
}

peg$subclass(peg$SyntaxError, Error);

function peg$Reference(value) {
  this.value = value;
}

peg$Reference.prototype = {
  get: function() {
    return this.value;
  },
  set: function(value) {
    this.value = value;
  }
};

function peg$DefaultTracer() {
  this.indentLevel = 0;
}

peg$DefaultTracer.prototype.trace = function(event) {
  var that = this;

  function log(event) {
    function repeat(string, n) {
      var result = "", i;

      for (i = 0; i < n; i++) {
        result += string;
      }

      return result;
    }

    function pad(string, length) {
      return string + repeat(" ", length - string.length);
    }

    function formatArgs(argMap) {
      var argParts = [];
      for (let argName in argMap) {
        if (argName === 'silence') {
          continue;
        }
        if (argName === 'boolParams') {
          argParts.push('0x' + argMap[argName].toString(16));
        } else {
          let displayName = argName.replace(/^param_/, '');
          if (typeof argMap[argName] === 'object' && argMap[argName].value !== undefined) {
            argParts.push(displayName + "=&" + JSON.stringify(argMap[argName].value));
          } else {
            argParts.push(displayName + "=" + argMap[argName]);
          }
        }
      }
      if (argParts.length) {
        return ' <' + argParts.join(', ') + '>';
      } else {
        return '';
      }
    }

    console.log(
      pad(
        event.location.start.line + ":" + event.location.start.column + "-"
        + event.location.end.line + ":" + event.location.end.column + " ",
        20
      )
      + pad(event.type, 10) + " "
      + repeat("  ", that.indentLevel) + event.rule
      + formatArgs(event.args)
    );
  }

  switch (event.type) {
    case "rule.enter":
      log(event);
      this.indentLevel++;
      break;

    case "rule.match":
      this.indentLevel--;
      log(event);
      break;

    case "rule.fail":
      this.indentLevel--;
      log(event);
      break;

    default:
      throw new Error("Invalid event type: " + event.type + ".");
  }
};

function peg$parse(input, options = {}) {
  var parser = this,
      peg$currPos = 0,
      peg$savedPos = 0,
      peg$FAILED = {},
      peg$startRule = options.startRule || '(DEFAULT)',
      peg$result;

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description) {
    throw peg$buildException(
      null,
      [{ type: "other", description: description }],
      input.substring(peg$savedPos, peg$currPos),
      peg$computeLocation(peg$savedPos, peg$currPos)
    );
  }

  function error(message) {
    throw peg$buildException(
      message,
      null,
      input.substring(peg$savedPos, peg$currPos),
      peg$computeLocation(peg$savedPos, peg$currPos)
    );
  }

  var peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
      peg$maxFailPos       = 0,
      peg$maxFailExpected  = [];

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos],
      p, ch;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line:   details.line,
        column: details.column,
        seenCR: details.seenCR
      };

      while (p < pos) {
        ch = input.charAt(p);
        if (ch === "\n") {
          if (!details.seenCR) { details.line++; }
          details.column = 1;
          details.seenCR = false;
        } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
          details.line++;
          details.column = 1;
          details.seenCR = true;
        } else {
          details.column++;
          details.seenCR = false;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;
      return details;
    }
  }

  function peg$computeLocation(startPos, endPos) {
    if (endPos > input.length) {
      endPos--;
    }
    var startPosDetails = peg$computePosDetails(startPos),
      endPosDetails   = peg$computePosDetails(endPos);

    return {
      start: {
        offset: startPos,
        line:   startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line:   endPosDetails.line,
        column: endPosDetails.column
      }
    };
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildException(message, expected, found, location) {
    function cleanupExpected(expected) {
      var i = 1;

      expected.sort(function(a, b) {
        if (a.type < b.type) {
          return -1;
        } else if (a.type > b.type) {
          return 1;
        } else if (a.value < b.value) {
          return -1;
        } else if (a.value > b.value) {
          return 1;
        } else if (a.description < b.description) {
          return -1;
        } else if (a.description > b.description) {
          return 1;
        } else {
          return 0;
        }
      });

      /*
       * This works because the bytecode generator guarantees that every
       * expectation object exists only once, so it's enough to use |===| instead
       * of deeper structural comparison.
       */
      while (i < expected.length) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        } else {
          i++;
        }
      }
    }

    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a string
         * literal except for the closing quote character, backslash, carriage
         * return, line separator, paragraph separator, and line feed. Any character
         * may appear in the form of an escape sequence.
         *
         * For portability, we also escape all control and non-ASCII characters.
         * Note that "\0" and "\v" escape sequences are not used because JSHint does
         * not like the first and IE the second.
         */
        return s
          .replace(/\\/g,   '\\\\')       // backslash
          .replace(/"/g,    '\\"')        // closing double quote
          .replace(/\x08/g, '\\b')        // backspace
          .replace(/\t/g,   '\\t')        // horizontal tab
          .replace(/\n/g,   '\\n')        // line feed
          .replace(/\f/g,   '\\f')        // form feed
          .replace(/\r/g,   '\\r')        // carriage return
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDescs = new Array(expected.length),
        expectedDesc, foundDesc, i;

      for (i = 0; i < expected.length; i++) {
        expectedDescs[i] = expected[i].description;
      }

      expectedDesc = expected.length > 1
        ? expectedDescs.slice(0, -1).join(", ")
        + " or "
        + expectedDescs[expected.length - 1]
        : expectedDescs[0];

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    if (expected !== null) {
      cleanupExpected(expected);
    }

    return new peg$SyntaxError(
      message !== null ? message : buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$buildParseException() {
    return peg$buildException(
      null,
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
    );
  }


  function peg$traceCall(parseFunc, name, argNames, args) {
    var argMap = {};
    for (let i = 0; i < args.length; i++) {
      argMap[argNames[i]] = args[i];
    }
    var startPos = peg$currPos;
    peg$tracer.trace({
      type:     "rule.enter",
      rule:     name,
      location: peg$computeLocation(startPos, startPos),
      args: argMap
    });
    var result = parseFunc.apply(null, args);
    if (result !== peg$FAILED) {
      peg$tracer.trace({
        type:     "rule.match",
        rule:     name,
        result:   result,
        location: peg$computeLocation(startPos, peg$currPos)
      });
    } else {
      peg$tracer.trace({
        type: "rule.fail",
        rule: name,
        location: peg$computeLocation(startPos, startPos)
      });
    }
    return result;
  }

  var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();

  

  // expectations
  var peg$c0 = {"type":"end","description":"end of input"};
  var peg$c1 = {"type":"literal","value":"=","description":"\"=\""};
  var peg$c2 = {"type":"other","description":"code block"};
  var peg$c3 = {"type":"other","description":"whitespace"};
  var peg$c4 = {"type":"other","description":"end of line"};
  var peg$c5 = {"type":"other","description":"comment"};
  var peg$c6 = {"type":"other","description":"identifier"};
  var peg$c7 = {"type":"other","description":"string"};
  var peg$c8 = {"type":"literal","value":"/","description":"\"/\""};
  var peg$c9 = {"type":"literal","value":"//","description":"\"//\""};
  var peg$c10 = {"type":"any","description":"any character"};
  var peg$c11 = {"type":"literal","value":":","description":"\":\""};
  var peg$c12 = {"type":"literal","value":"<","description":"\"<\""};
  var peg$c13 = {"type":"literal","value":"&","description":"\"&\""};
  var peg$c14 = {"type":"literal","value":">","description":"\">\""};
  var peg$c15 = {"type":"literal","value":"$","description":"\"$\""};
  var peg$c16 = {"type":"literal","value":"!","description":"\"!\""};
  var peg$c17 = {"type":"literal","value":"(","description":"\"(\""};
  var peg$c18 = {"type":"literal","value":")","description":"\")\""};
  var peg$c19 = {"type":"literal","value":"?","description":"\"?\""};
  var peg$c20 = {"type":"literal","value":"*","description":"\"*\""};
  var peg$c21 = {"type":"literal","value":"+","description":"\"+\""};
  var peg$c22 = {"type":"other","description":"literal"};
  var peg$c23 = {"type":"other","description":"character class"};
  var peg$c24 = {"type":"literal","value":".","description":"\".\""};
  var peg$c25 = {"type":"literal","value":",","description":"\",\""};
  var peg$c26 = {"type":"literal","value":"++","description":"\"++\""};
  var peg$c27 = {"type":"class","value":"[0-9]","description":"[0-9]"};

  // actions
  function peg$a0(initializer, rules) {
  
        var astInit;
        if (initializer.length === 0) {
          astInit = null;
        } else if (initializer.length === 1) {
          astInit = initializer[0][0];
        } else {
          astInit = extractList(initializer, 0);
        }
        return {
          type:        "grammar",
          initializer: astInit,
          rules:       extractList(rules, 0),
          location:    location()
        };
      
  }
  function peg$a1(code) {
  
        return { type: "initializer", code: code, location: location() };
      
  }
  function peg$a2(name, displayName, expression) {
  
        return {
          type:        "rule",
          name:        name,
          expression:  displayName !== null
            ? {
                type:       "named",
                name:       displayName[0],
                expression: expression,
                location:   location()
              }
            : expression,
          location:    location()
        };
      
  }
  function peg$a3(code) {
   return code; 
  }
  function peg$a4(first, rest) {
   return first + rest.join(""); 
  }
  function peg$a5(chars) {
   return chars.join(""); 
  }
  function peg$a6(first, rest) {
  
        return rest.length > 0
          ? {
              type:         "choice",
              alternatives: buildList(first, rest, 3),
              location:     location()
            }
          : first;
      
  }
  function peg$a7(sequence) {
   return sequence; 
  }
  function peg$a8() {
   return text(); 
  }
  function peg$a9(expression, code) {
  
        return code !== null
          ? {
              type:       "action",
              expression: expression,
              code:       code[1],
              location:   location()
            }
          : expression;
      
  }
  function peg$a10(digits) {
  
        return String.fromCharCode(parseInt(digits, 16));
      
  }
  function peg$a11() {
   return "\0"; 
  }
  function peg$a12() {
   return ""; 
  }
  function peg$a13(first, rest) {
  
        return rest.length > 0
          ? {
              type:     "sequence",
              elements: buildList(first, rest, 1),
              location: location()
            }
          : first;
      
  }
  function peg$a14() {
   return "\b";   
  }
  function peg$a15() {
   return "\f";   
  }
  function peg$a16() {
   return "\n";   
  }
  function peg$a17() {
   return "\r";   
  }
  function peg$a18() {
   return "\t";   
  }
  function peg$a19() {
   return "\x0B"; 
  }
  function peg$a20(label, ampersand, parameter) {
  
        return {
          type:      "labeled_param",
          label:     label,
          parameter: parameter,
          isref:     !!ampersand,
          location:  location()
        };
      
  }
  function peg$a21(label, expression) {
  
        return {
          type:       "labeled",
          label:      label,
          expression: expression,
          location:   location()
        };
      
  }
  function peg$a22(operator, expression) {
  
        return {
          type:       OPS_TO_PREFIXED_TYPES[operator],
          expression: expression,
          location:   location()
        };
      
  }
  function peg$a23(name) {
   return name; 
  }
  function peg$a24(expression, operator) {
  
        return {
          type:       OPS_TO_SUFFIXED_TYPES[operator],
          expression: expression,
          location:   location()
        };
      
  }
  function peg$a25(expression) {
   return expression; 
  }
  function peg$a26(value, ignoreCase) {
  
        return {
          type:       "literal",
          value:      value,
          ignoreCase: ignoreCase !== null,
          location:   location()
        };
      
  }
  function peg$a27(inverted, parts, ignoreCase) {
  
        return {
          type:       "class",
          parts:      parts.filter( (p) => p !== ""), // filter empty strings
          inverted:   inverted !== null,
          ignoreCase: ignoreCase !== null,
          rawText:    text(),
          location:   location()
        };
      
  }
  function peg$a28() {
   return { type: "any", location: location() }; 
  }
  function peg$a29(name, assign) {
  
        return {
          type: "rule_ref",
          name: name,
          assignments: assign || [],
          location: location()
        };
      
  }
  function peg$a30(operator, code) {
  
        return {
          type:     OPS_TO_SEMANTIC_PREDICATE_TYPES[operator],
          code:     code,
          location: location()
        };
      
  }
  function peg$a31(operator, parameter) {
  
        return {
          type:      OPS_TO_PARAMETER_PREDICATE_TYPES[operator],
          parameter: parameter,
          location:  location()
        };
      
  }
  function peg$a32(begin, end) {
  
        if (begin.charCodeAt(0) > end.charCodeAt(0)) {
          error(
            "Invalid character range: " + text() + "."
          );
        }
  
        return [begin, end];
      
  }
  function peg$a33(first, rest) {
  
        return buildList(first, rest, 3);
      
  }
  function peg$a34(ampersand, name, assign) {
  
        var type, value;
        if (assign) {
          if (assign[2]) {
            type = assign[2].type;
            value = assign[2].value;
          } else {
            type = assign.type;
            value = assign.value;
          }
        } else {
          type = 'boolean';
          value = true;
        }
        return {
          name: name,
          type: type,
          value: value,
          isref: !!ampersand
        };
      
  }
  function peg$a35() {
  
        return {
          type: "increment",
          value: 1
        };
      
  }
  function peg$a36(value) {
  
        return {
          type: "boolean",
          value: value === "true"
        };
      
  }
  function peg$a37(value) {
  
        return {
          type: "integer",
          value: Number.parseInt(value)
        };
      
  }
  function peg$a38(value) {
  
        return {
          type: "string",
          value: value
        };
      
  }

  // initializer
  
    var OPS_TO_PREFIXED_TYPES = {
      "$": "text",
      "&": "simple_and",
      "!": "simple_not"
    };
  
    var OPS_TO_SUFFIXED_TYPES = {
      "?": "optional",
      "*": "zero_or_more",
      "+": "one_or_more"
    };
  
    var OPS_TO_SEMANTIC_PREDICATE_TYPES = {
      "&": "semantic_and",
      "!": "semantic_not"
    };
  
    var OPS_TO_PARAMETER_PREDICATE_TYPES = {
      "&": "parameter_and",
      "!": "parameter_not"
    };
  
    function extractList(list, index) {
      return list.map( (element) => element[index] );
    }
  
    function buildList(first, rest, index) {
      return [first].concat(extractList(rest, index));
    }
  

  // generated
  function peg$parseGrammar(silence) {
    var r1,p2,p3,r4,r5,r6,p7,r8,r9,r10;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$discard__();
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = [];
    for (;;) {
      seq_2: {
      p7 = peg$currPos;
      r8 = peg$parseInitializer(silence);
      if (r8===peg$FAILED) {
        r6 = peg$FAILED;
        break seq_2;
      }
      r9 = peg$parse__(silence);
      if (r9===peg$FAILED) {
        peg$currPos = p7;
        r6 = peg$FAILED;
        break seq_2;
      }
      r6 = [r8,r9];
      } // seq_2
      if (r6!==peg$FAILED) {
        r5.push(r6);
      } else {
        break;
      }
      // free r8,r9
      // free p7
    }
    // initializer <- r5
    // free r6
    r6 = [];
    for (;;) {
      seq_3: {
      p7 = peg$currPos;
      r8 = peg$parseRule(silence);
      if (r8===peg$FAILED) {
        r9 = peg$FAILED;
        break seq_3;
      }
      r10 = peg$parse__(silence);
      if (r10===peg$FAILED) {
        peg$currPos = p7;
        r9 = peg$FAILED;
        break seq_3;
      }
      r9 = [r8,r10];
      } // seq_3
      if (r9!==peg$FAILED) {
        r6.push(r9);
      } else {
        break;
      }
      // free r8,r10
      // free p7
    }
    if (r6.length === 0) {
      r6 = peg$FAILED;
    }
    // rules <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free r9
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a0(r5, r6);
    }
    // free r4
    // free p3
    // free p2
    return r1;
  }
  function peg$discard__() {
    var r1,r2;
    for (;;) {
      choice_1: {
      r2 = peg$discardWhiteSpace();
      if (r2!==peg$FAILED) {
        break choice_1;
      }
      r2 = peg$discardLineTerminatorSequence();
      if (r2!==peg$FAILED) {
        break choice_1;
      }
      r2 = peg$discardComment();
      } // choice_1
      if (r2===peg$FAILED) {
        break;
      }
    }
    // free r2
    r1 = true;
    // free r1
    return r1;
  }
  function peg$parseInitializer(silence) {
    var r1,p2,p3,r4,r5;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseCodeBlock(silence);
    // code <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discardEOS();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a1(r4);
    }
    // free r5
    // free p3
    // free p2
    return r1;
  }
  function peg$parse__(silence) {
    var r1,r2;
    r1 = [];
    for (;;) {
      choice_1: {
      r2 = peg$parseWhiteSpace(silence);
      if (r2!==peg$FAILED) {
        break choice_1;
      }
      r2 = peg$parseLineTerminatorSequence(silence);
      if (r2!==peg$FAILED) {
        break choice_1;
      }
      r2 = peg$parseComment(silence);
      } // choice_1
      if (r2!==peg$FAILED) {
        r1.push(r2);
      } else {
        break;
      }
    }
    // free r2
    return r1;
  }
  function peg$parseRule(silence) {
    var r1,p2,p3,r4,r5,r6,p7,r8,r9,r10,r11;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseIdentifierName(silence);
    // name <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    seq_2: {
    p7 = peg$currPos;
    r8 = peg$parseStringLiteral(silence);
    if (r8===peg$FAILED) {
      r6 = peg$FAILED;
      break seq_2;
    }
    r9 = peg$parse__(silence);
    if (r9===peg$FAILED) {
      peg$currPos = p7;
      r6 = peg$FAILED;
      break seq_2;
    }
    r6 = [r8,r9];
    } // seq_2
    if (r6===peg$FAILED) {
      r6 = null;
    }
    // free r8,r9
    // free p7
    // displayName <- r6
    if (input.charCodeAt(peg$currPos) === 61) {
      r9 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c1); }
      r9 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r8 = peg$discard__();
    if (r8===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r10 = peg$parseChoiceExpression(silence);
    // expression <- r10
    if (r10===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r11 = peg$discardEOS();
    if (r11===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a2(r4, r6, r10);
    }
    // free r5,r9,r8,r11
    // free p3
    // free p2
    return r1;
  }
  function peg$discardWhiteSpace() {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 9) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 11) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 12) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 32) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 160) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 65279) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$discardLineTerminatorSequence() {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 10) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.substr(peg$currPos,2) === "\r\n") {
      r1 = true;
      peg$currPos += 2;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 13) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8232) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8233) {
      r1 = true;
      peg$currPos += 1;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$discardComment() {
    var r1;
    choice_1: {
    r1 = peg$discardMultiLineComment();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardSingleLineComment();
    } // choice_1
    return r1;
  }
  function peg$parseCodeBlock(silence) {
    var r1,p2,p3,r4,r5,r6;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$parseCode();
    // code <- r5
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 125) {
      r6 = true;
      peg$currPos += 1;
    } else {
      r6 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a3(r5);
    } else {
      if (!silence) { peg$fail(peg$c2); }
    }
    // free r4,r6
    // free p3
    // free p2
    return r1;
  }
  function peg$discardEOS() {
    var r1,p2,r3,r4,r5;
    choice_1: {
    seq_1: {
    p2 = peg$currPos;
    r3 = peg$discard__();
    if (r3===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 59) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    // free r3,r4
    // free p2
    seq_2: {
    p2 = peg$currPos;
    r4 = peg$discard_();
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_2;
    }
    r3 = peg$discardSingleLineComment();
    if (r3===peg$FAILED) {
      r3 = null;
    }
    r5 = peg$discardLineTerminatorSequence();
    if (r5===peg$FAILED) {
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_2;
    }
    r1 = true;
    } // seq_2
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    // free r4,r3,r5
    // free p2
    seq_3: {
    p2 = peg$currPos;
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_3;
    }
    r3 = peg$discardEOF();
    if (r3===peg$FAILED) {
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_3;
    }
    r1 = true;
    } // seq_3
    // free r5,r3
    // free p2
    } // choice_1
    return r1;
  }
  function peg$parseWhiteSpace(silence) {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 9) {
      r1 = "\t";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 11) {
      r1 = "\u000b";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 12) {
      r1 = "\f";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 32) {
      r1 = " ";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 160) {
      r1 = "\xA0";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 65279) {
      r1 = "\uFEFF";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/.test(r1)) {
      peg$currPos++;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    if (r1===peg$FAILED) {
      if (!silence) { peg$fail(peg$c3); }
    }
    return r1;
  }
  function peg$parseLineTerminatorSequence(silence) {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 10) {
      r1 = "\n";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.substr(peg$currPos,2);
    if (r1 === "\r\n") {
      peg$currPos += 2;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 13) {
      r1 = "\r";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8232) {
      r1 = "\u2028";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8233) {
      r1 = "\u2029";
      peg$currPos += 1;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    if (r1===peg$FAILED) {
      if (!silence) { peg$fail(peg$c4); }
    }
    return r1;
  }
  function peg$parseComment(silence) {
    var r1;
    choice_1: {
    r1 = peg$parseMultiLineComment();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseSingleLineComment(true);
    } // choice_1
    if (r1===peg$FAILED) {
      if (!silence) { peg$fail(peg$c5); }
    }
    return r1;
  }
  function peg$parseIdentifierName(silence) {
    var r1,p2,p3,r4,r5,r6;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseIdentifierStart();
    // first <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = [];
    for (;;) {
      r6 = peg$parseIdentifierPart();
      if (r6!==peg$FAILED) {
        r5.push(r6);
      } else {
        break;
      }
    }
    // rest <- r5
    // free r6
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a4(r4, r5);
    } else {
      if (!silence) { peg$fail(peg$c6); }
    }
    // free p3
    // free p2
    return r1;
  }
  function peg$parseStringLiteral(silence) {
    var r1,p2,p3,r4,r5,r6,r7;
    choice_1: {
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = [];
    for (;;) {
      r6 = peg$parseDoubleStringCharacter();
      if (r6!==peg$FAILED) {
        r5.push(r6);
      } else {
        break;
      }
    }
    // chars <- r5
    // free r6
    if (input.charCodeAt(peg$currPos) === 34) {
      r6 = true;
      peg$currPos += 1;
    } else {
      r6 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a5(r5);
      break choice_1;
    }
    // free r4,r6
    // free p3
    // free p2
    p2 = peg$currPos;
    seq_2: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      r6 = true;
      peg$currPos += 1;
    } else {
      r6 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_2;
    }
    r4 = [];
    for (;;) {
      r7 = peg$parseSingleStringCharacter();
      if (r7!==peg$FAILED) {
        r4.push(r7);
      } else {
        break;
      }
    }
    // chars <- r4
    // free r7
    if (input.charCodeAt(peg$currPos) === 39) {
      r7 = true;
      peg$currPos += 1;
    } else {
      r7 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_2;
    }
    r1 = true;
    } // seq_2
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a5(r4);
    }
    // free r6,r7
    // free p3
    // free p2
    } // choice_1
    if (r1===peg$FAILED) {
      if (!silence) { peg$fail(peg$c7); }
    }
    return r1;
  }
  function peg$parseChoiceExpression(silence) {
    var r1,p2,p3,r4,r5,r6,p7,r8,r9,r10,r11;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseActionExpression(silence);
    // first <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = [];
    for (;;) {
      seq_2: {
      p7 = peg$currPos;
      r8 = peg$parse__(silence);
      if (r8===peg$FAILED) {
        r6 = peg$FAILED;
        break seq_2;
      }
      if (input.charCodeAt(peg$currPos) === 47) {
        r9 = "/";
        peg$currPos += 1;
      } else {
        if (!silence) { peg$fail(peg$c8); }
        r9 = peg$FAILED;
        peg$currPos = p7;
        r6 = peg$FAILED;
        break seq_2;
      }
      r10 = peg$parse__(silence);
      if (r10===peg$FAILED) {
        peg$currPos = p7;
        r6 = peg$FAILED;
        break seq_2;
      }
      r11 = peg$parseActionExpression(silence);
      if (r11===peg$FAILED) {
        peg$currPos = p7;
        r6 = peg$FAILED;
        break seq_2;
      }
      r6 = [r8,r9,r10,r11];
      } // seq_2
      if (r6!==peg$FAILED) {
        r5.push(r6);
      } else {
        break;
      }
      // free r8,r9,r10,r11
      // free p7
    }
    // rest <- r5
    // free r6
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a6(r4, r5);
    }
    // free p3
    // free p2
    return r1;
  }
  function peg$discardMultiLineComment() {
    var r1,p2,r3,r4,r5,p6,r7,r8;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,2) === "/*") {
      r3 = true;
      peg$currPos += 2;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    for (;;) {
      seq_2: {
      p6 = peg$currPos;
      if (input.substr(peg$currPos,2) === "*/") {
        r7 = true;
        peg$currPos += 2;
      } else {
        r7 = peg$FAILED;
      }
      if (r7 === peg$FAILED) {
        r7 = void 0;
      } else {
        r7 = peg$FAILED;
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r8 = peg$discardSourceCharacter();
      if (r8===peg$FAILED) {
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r5 = true;
      } // seq_2
      if (r5===peg$FAILED) {
        break;
      }
      // free r7,r8
      // free p6
    }
    // free r5
    r4 = true;
    if (r4===peg$FAILED) {
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free r4
    if (input.substr(peg$currPos,2) === "*/") {
      r4 = true;
      peg$currPos += 2;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardSingleLineComment() {
    var r1,p2,r3,r4,r5,p6,r7,r8;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,2) === "//") {
      r3 = true;
      peg$currPos += 2;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    for (;;) {
      seq_2: {
      p6 = peg$currPos;
      if (/^[\n\r\u2028\u2029]/.test(input.charAt(peg$currPos))) {
        r7 = true;
        peg$currPos++;
      } else {
        r7 = peg$FAILED;
      }
      if (r7 === peg$FAILED) {
        r7 = void 0;
      } else {
        r7 = peg$FAILED;
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r8 = peg$discardSourceCharacter();
      if (r8===peg$FAILED) {
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r5 = true;
      } // seq_2
      if (r5===peg$FAILED) {
        break;
      }
      // free r7,r8
      // free p6
    }
    // free r5
    r4 = true;
    if (r4===peg$FAILED) {
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free r4
    r1 = true;
    } // seq_1
    // free r3
    // free p2
    return r1;
  }
  function peg$parseCode() {
    var p1,r2,r3,r4,p5,r6,r7;
    p1 = peg$currPos;
    for (;;) {
      choice_1: {
      r3 = peg$FAILED;
      for (;;) {
        seq_1: {
        p5 = peg$currPos;
        if (/^[{}]/.test(input.charAt(peg$currPos))) {
          r6 = true;
          peg$currPos++;
        } else {
          r6 = peg$FAILED;
        }
        if (r6 === peg$FAILED) {
          r6 = void 0;
        } else {
          r6 = peg$FAILED;
          peg$currPos = p5;
          r4 = peg$FAILED;
          break seq_1;
        }
        r7 = peg$discardSourceCharacter();
        if (r7===peg$FAILED) {
          peg$currPos = p5;
          r4 = peg$FAILED;
          break seq_1;
        }
        r4 = true;
        } // seq_1
        if (r4!==peg$FAILED) {
          r3 = true;
        } else {
          break;
        }
        // free r6,r7
        // free p5
      }
      if (r3!==peg$FAILED) {
        break choice_1;
      }
      // free r4
      seq_2: {
      p5 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        r4 = true;
        peg$currPos += 1;
      } else {
        r4 = peg$FAILED;
        r3 = peg$FAILED;
        break seq_2;
      }
      r7 = peg$discardCode();
      if (r7===peg$FAILED) {
        peg$currPos = p5;
        r3 = peg$FAILED;
        break seq_2;
      }
      if (input.charCodeAt(peg$currPos) === 125) {
        r6 = true;
        peg$currPos += 1;
      } else {
        r6 = peg$FAILED;
        peg$currPos = p5;
        r3 = peg$FAILED;
        break seq_2;
      }
      r3 = true;
      } // seq_2
      // free r4,r7,r6
      // free p5
      } // choice_1
      if (r3===peg$FAILED) {
        break;
      }
    }
    // free r3
    r2 = true;
    if (r2!==peg$FAILED) {
      r2 = input.substring(p1, peg$currPos);
    } else {
      r2 = peg$FAILED;
    }
    // free p1
    return r2;
  }
  function peg$discard_() {
    var r1,r2;
    for (;;) {
      choice_1: {
      r2 = peg$discardWhiteSpace();
      if (r2!==peg$FAILED) {
        break choice_1;
      }
      r2 = peg$discardMultiLineCommentNoLineTerminator();
      } // choice_1
      if (r2===peg$FAILED) {
        break;
      }
    }
    // free r2
    r1 = true;
    // free r1
    return r1;
  }
  function peg$discardEOF() {
    var r1,p2;
    p2 = peg$currPos;
    if (peg$currPos < input.length) {
      peg$currPos++;
      r1 = true;
    } else {
      r1 = peg$FAILED;
    }
    if (r1 === peg$FAILED) {
      r1 = void 0;
    } else {
      r1 = peg$FAILED;
      peg$currPos = p2;
    }
    // free p2
    return r1;
  }
  function peg$parseMultiLineComment() {
    var r1,p2,r3,r4,r5,p6,r7,r8;
    seq_1: {
    p2 = peg$currPos;
    r3 = input.substr(peg$currPos,2);
    if (r3 === "/*") {
      peg$currPos += 2;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r4 = [];
    for (;;) {
      seq_2: {
      p6 = peg$currPos;
      if (input.substr(peg$currPos,2) === "*/") {
        r7 = true;
        peg$currPos += 2;
      } else {
        r7 = peg$FAILED;
      }
      if (r7 === peg$FAILED) {
        r7 = void 0;
      } else {
        r7 = peg$FAILED;
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r8 = peg$parseSourceCharacter(true);
      if (r8===peg$FAILED) {
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r5 = [r7,r8];
      } // seq_2
      if (r5!==peg$FAILED) {
        r4.push(r5);
      } else {
        break;
      }
      // free r7,r8
      // free p6
    }
    // free r5
    r5 = input.substr(peg$currPos,2);
    if (r5 === "*/") {
      peg$currPos += 2;
    } else {
      r5 = peg$FAILED;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = [r3,r4,r5];
    } // seq_1
    // free r3,r4,r5
    // free p2
    return r1;
  }
  function peg$parseSingleLineComment(silence) {
    var r1,p2,r3,r4,r5,p6,r7,r8;
    seq_1: {
    p2 = peg$currPos;
    r3 = input.substr(peg$currPos,2);
    if (r3 === "//") {
      peg$currPos += 2;
    } else {
      if (!silence) { peg$fail(peg$c9); }
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r4 = [];
    for (;;) {
      seq_2: {
      p6 = peg$currPos;
      if (/^[\n\r\u2028\u2029]/.test(input.charAt(peg$currPos))) {
        r7 = true;
        peg$currPos++;
      } else {
        r7 = peg$FAILED;
      }
      if (r7 === peg$FAILED) {
        r7 = void 0;
      } else {
        r7 = peg$FAILED;
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r8 = peg$parseSourceCharacter(silence);
      if (r8===peg$FAILED) {
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r5 = [r7,r8];
      } // seq_2
      if (r5!==peg$FAILED) {
        r4.push(r5);
      } else {
        break;
      }
      // free r7,r8
      // free p6
    }
    // free r5
    r1 = [r3,r4];
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$parseIdentifierStart() {
    var r1,p2,p3,r4,r5;
    choice_1: {
    r1 = peg$parseUnicodeLetter();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    if (input.charCodeAt(peg$currPos) === 36) {
      r1 = "$";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 95) {
      r1 = "_";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$parseUnicodeEscapeSequence();
    // sequence <- r5
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a7(r5);
    }
    // free r4
    // free p3
    // free p2
    } // choice_1
    return r1;
  }
  function peg$parseIdentifierPart() {
    var r1;
    choice_1: {
    r1 = peg$parseIdentifierStart();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseUnicodeCombiningMark();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8204) {
      r1 = "\u200C";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8205) {
      r1 = "\u200D";
      peg$currPos += 1;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseDoubleStringCharacter() {
    var r1,p2,p3,r4,r5;
    choice_1: {
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    choice_2: {
    if (input.charCodeAt(peg$currPos) === 34) {
      r4 = true;
      peg$currPos += 1;
      break choice_2;
    } else {
      r4 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 92) {
      r4 = true;
      peg$currPos += 1;
      break choice_2;
    } else {
      r4 = peg$FAILED;
    }
    if (/^[\n\r\u2028\u2029]/.test(input.charAt(peg$currPos))) {
      r4 = true;
      peg$currPos++;
    } else {
      r4 = peg$FAILED;
    }
    } // choice_2
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discardSourceCharacter();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a8();
      break choice_1;
    }
    // free r4,r5
    // free p3
    // free p2
    p2 = peg$currPos;
    seq_2: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      r5 = true;
      peg$currPos += 1;
    } else {
      r5 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_2;
    }
    r4 = peg$parseEscapeSequence();
    // sequence <- r4
    if (r4===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_2;
    }
    r1 = true;
    } // seq_2
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a7(r4);
      break choice_1;
    }
    // free r5
    // free p3
    // free p2
    r1 = peg$parseLineContinuation();
    } // choice_1
    return r1;
  }
  function peg$parseSingleStringCharacter() {
    var r1,p2,p3,r4,r5;
    choice_1: {
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    choice_2: {
    if (input.charCodeAt(peg$currPos) === 39) {
      r4 = true;
      peg$currPos += 1;
      break choice_2;
    } else {
      r4 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 92) {
      r4 = true;
      peg$currPos += 1;
      break choice_2;
    } else {
      r4 = peg$FAILED;
    }
    if (/^[\n\r\u2028\u2029]/.test(input.charAt(peg$currPos))) {
      r4 = true;
      peg$currPos++;
    } else {
      r4 = peg$FAILED;
    }
    } // choice_2
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discardSourceCharacter();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a8();
      break choice_1;
    }
    // free r4,r5
    // free p3
    // free p2
    p2 = peg$currPos;
    seq_2: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      r5 = true;
      peg$currPos += 1;
    } else {
      r5 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_2;
    }
    r4 = peg$parseEscapeSequence();
    // sequence <- r4
    if (r4===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_2;
    }
    r1 = true;
    } // seq_2
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a7(r4);
      break choice_1;
    }
    // free r5
    // free p3
    // free p2
    r1 = peg$parseLineContinuation();
    } // choice_1
    return r1;
  }
  function peg$parseActionExpression(silence) {
    var r1,p2,p3,r4,r5,p6,r7,r8;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseSequenceExpression(silence);
    // expression <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    seq_2: {
    p6 = peg$currPos;
    r7 = peg$parse__(silence);
    if (r7===peg$FAILED) {
      r5 = peg$FAILED;
      break seq_2;
    }
    r8 = peg$parseCodeBlock(silence);
    if (r8===peg$FAILED) {
      peg$currPos = p6;
      r5 = peg$FAILED;
      break seq_2;
    }
    r5 = [r7,r8];
    } // seq_2
    if (r5===peg$FAILED) {
      r5 = null;
    }
    // free r7,r8
    // free p6
    // code <- r5
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a9(r4, r5);
    }
    // free p3
    // free p2
    return r1;
  }
  function peg$discardSourceCharacter() {
    var r1;
    if (peg$currPos < input.length) {
      peg$currPos++;
      r1 = true;
    } else {
      r1 = peg$FAILED;
    }
    return r1;
  }
  function peg$discardCode() {
    var r1,r2,r3,p4,r5,r6;
    for (;;) {
      choice_1: {
      r2 = peg$FAILED;
      for (;;) {
        seq_1: {
        p4 = peg$currPos;
        if (/^[{}]/.test(input.charAt(peg$currPos))) {
          r5 = true;
          peg$currPos++;
        } else {
          r5 = peg$FAILED;
        }
        if (r5 === peg$FAILED) {
          r5 = void 0;
        } else {
          r5 = peg$FAILED;
          peg$currPos = p4;
          r3 = peg$FAILED;
          break seq_1;
        }
        r6 = peg$discardSourceCharacter();
        if (r6===peg$FAILED) {
          peg$currPos = p4;
          r3 = peg$FAILED;
          break seq_1;
        }
        r3 = true;
        } // seq_1
        if (r3!==peg$FAILED) {
          r2 = true;
        } else {
          break;
        }
        // free r5,r6
        // free p4
      }
      if (r2!==peg$FAILED) {
        break choice_1;
      }
      // free r3
      seq_2: {
      p4 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 123) {
        r3 = true;
        peg$currPos += 1;
      } else {
        r3 = peg$FAILED;
        r2 = peg$FAILED;
        break seq_2;
      }
      r6 = peg$discardCode();
      if (r6===peg$FAILED) {
        peg$currPos = p4;
        r2 = peg$FAILED;
        break seq_2;
      }
      if (input.charCodeAt(peg$currPos) === 125) {
        r5 = true;
        peg$currPos += 1;
      } else {
        r5 = peg$FAILED;
        peg$currPos = p4;
        r2 = peg$FAILED;
        break seq_2;
      }
      r2 = true;
      } // seq_2
      // free r3,r6,r5
      // free p4
      } // choice_1
      if (r2===peg$FAILED) {
        break;
      }
    }
    // free r2
    r1 = true;
    // free r1
    return r1;
  }
  function peg$discardMultiLineCommentNoLineTerminator() {
    var r1,p2,r3,r4,r5,p6,r7,r8;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,2) === "/*") {
      r3 = true;
      peg$currPos += 2;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    for (;;) {
      seq_2: {
      p6 = peg$currPos;
      choice_1: {
      if (input.substr(peg$currPos,2) === "*/") {
        r7 = true;
        peg$currPos += 2;
        break choice_1;
      } else {
        r7 = peg$FAILED;
      }
      if (/^[\n\r\u2028\u2029]/.test(input.charAt(peg$currPos))) {
        r7 = true;
        peg$currPos++;
      } else {
        r7 = peg$FAILED;
      }
      } // choice_1
      if (r7 === peg$FAILED) {
        r7 = void 0;
      } else {
        r7 = peg$FAILED;
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r8 = peg$discardSourceCharacter();
      if (r8===peg$FAILED) {
        peg$currPos = p6;
        r5 = peg$FAILED;
        break seq_2;
      }
      r5 = true;
      } // seq_2
      if (r5===peg$FAILED) {
        break;
      }
      // free r7,r8
      // free p6
    }
    // free r5
    r4 = true;
    if (r4===peg$FAILED) {
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free r4
    if (input.substr(peg$currPos,2) === "*/") {
      r4 = true;
      peg$currPos += 2;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$parseSourceCharacter(silence) {
    var r1;
    if (peg$currPos < input.length) {
      r1 = input.charAt(peg$currPos++);
    } else {
      r1 = peg$FAILED;
      if (!silence) { peg$fail(peg$c10); }
    }
    return r1;
  }
  function peg$parseUnicodeLetter() {
    var r1;
    choice_1: {
    r1 = input.charAt(peg$currPos);
    if (/^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA\uFF21-\uFF3A]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uAA70\uAADD\uAAF3-\uAAF4\uFF70\uFF9E-\uFF9F]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0977\u0979-\u097F\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58-\u0C59\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/.test(r1)) {
      peg$currPos++;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseUnicodeEscapeSequence() {
    var r1,p2,p3,r4,r5,p6,p7,r8,r9,r10,r11;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 117) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p6 = peg$currPos;
    seq_2: {
    p7 = peg$currPos;
    if (/^[0-9a-f]/i.test(input.charAt(peg$currPos))) {
      r8 = true;
      peg$currPos++;
    } else {
      r8 = peg$FAILED;
      r5 = peg$FAILED;
      break seq_2;
    }
    if (/^[0-9a-f]/i.test(input.charAt(peg$currPos))) {
      r9 = true;
      peg$currPos++;
    } else {
      r9 = peg$FAILED;
      peg$currPos = p7;
      r5 = peg$FAILED;
      break seq_2;
    }
    if (/^[0-9a-f]/i.test(input.charAt(peg$currPos))) {
      r10 = true;
      peg$currPos++;
    } else {
      r10 = peg$FAILED;
      peg$currPos = p7;
      r5 = peg$FAILED;
      break seq_2;
    }
    if (/^[0-9a-f]/i.test(input.charAt(peg$currPos))) {
      r11 = true;
      peg$currPos++;
    } else {
      r11 = peg$FAILED;
      peg$currPos = p7;
      r5 = peg$FAILED;
      break seq_2;
    }
    r5 = true;
    } // seq_2
    // digits <- r5
    if (r5!==peg$FAILED) {
      r5 = input.substring(p6, peg$currPos);
    } else {
      r5 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free r8,r9,r10,r11
    // free p7
    // free p6
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a10(r5);
    }
    // free r4
    // free p3
    // free p2
    return r1;
  }
  function peg$parseUnicodeCombiningMark() {
    var r1;
    choice_1: {
    r1 = input.charAt(peg$currPos);
    if (/^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u08FE\u0900-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1DC0-\u1DE6\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE26]/.test(r1)) {
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    r1 = input.charAt(peg$currPos);
    if (/^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u19B0-\u19C0\u19C8-\u19C9\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BAC-\u1BAD\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/.test(r1)) {
      peg$currPos++;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseEscapeSequence() {
    var r1,p2,p3,r4,r5,p6;
    choice_1: {
    r1 = peg$parseCharacterEscapeSequence();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p6 = peg$currPos;
    if (/^[0-9]/.test(input.charAt(peg$currPos))) {
      r5 = true;
      peg$currPos++;
    } else {
      r5 = peg$FAILED;
    }
    if (r5 === peg$FAILED) {
      r5 = void 0;
    } else {
      r5 = peg$FAILED;
      peg$currPos = p6;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p6
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a11();
      break choice_1;
    }
    // free r4,r5
    // free p3
    // free p2
    r1 = peg$parseHexEscapeSequence();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseUnicodeEscapeSequence();
    } // choice_1
    return r1;
  }
  function peg$parseLineContinuation() {
    var r1,p2,p3,r4,r5;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discardLineTerminatorSequence();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a12();
    }
    // free r4,r5
    // free p3
    // free p2
    return r1;
  }
  function peg$parseSequenceExpression(silence) {
    var r1,p2,p3,r4,r5,r6,p7,r8,r9;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseSequenceElement(silence);
    // first <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = [];
    for (;;) {
      seq_2: {
      p7 = peg$currPos;
      r8 = peg$parse__(silence);
      if (r8===peg$FAILED) {
        r6 = peg$FAILED;
        break seq_2;
      }
      r9 = peg$parseSequenceElement(silence);
      if (r9===peg$FAILED) {
        peg$currPos = p7;
        r6 = peg$FAILED;
        break seq_2;
      }
      r6 = [r8,r9];
      } // seq_2
      if (r6!==peg$FAILED) {
        r5.push(r6);
      } else {
        break;
      }
      // free r8,r9
      // free p7
    }
    // rest <- r5
    // free r6
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a13(r4, r5);
    }
    // free p3
    // free p2
    return r1;
  }
  function peg$parseCharacterEscapeSequence() {
    var r1;
    choice_1: {
    r1 = peg$parseSingleEscapeCharacter();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseNonEscapeCharacter();
    } // choice_1
    return r1;
  }
  function peg$parseHexEscapeSequence() {
    var r1,p2,p3,r4,r5,p6,p7,r8,r9;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 120) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p6 = peg$currPos;
    seq_2: {
    p7 = peg$currPos;
    if (/^[0-9a-f]/i.test(input.charAt(peg$currPos))) {
      r8 = true;
      peg$currPos++;
    } else {
      r8 = peg$FAILED;
      r5 = peg$FAILED;
      break seq_2;
    }
    if (/^[0-9a-f]/i.test(input.charAt(peg$currPos))) {
      r9 = true;
      peg$currPos++;
    } else {
      r9 = peg$FAILED;
      peg$currPos = p7;
      r5 = peg$FAILED;
      break seq_2;
    }
    r5 = true;
    } // seq_2
    // digits <- r5
    if (r5!==peg$FAILED) {
      r5 = input.substring(p6, peg$currPos);
    } else {
      r5 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free r8,r9
    // free p7
    // free p6
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a10(r5);
    }
    // free r4
    // free p3
    // free p2
    return r1;
  }
  function peg$parseSequenceElement(silence) {
    var r1;
    choice_1: {
    r1 = peg$parseLabeledParameter(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseLabeledExpression(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parsePrefixedExpression(silence);
    } // choice_1
    return r1;
  }
  function peg$parseSingleEscapeCharacter() {
    var r1,p2;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 39) {
      r1 = "'";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 34) {
      r1 = "\"";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 92) {
      r1 = "\\";
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a14();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 102) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a15();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 110) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a16();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 114) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a17();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 116) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a18();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 118) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a19();
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    } // choice_1
    return r1;
  }
  function peg$parseNonEscapeCharacter() {
    var r1,p2,p3,r4,r5;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    choice_1: {
    r4 = peg$discardEscapeCharacter();
    if (r4!==peg$FAILED) {
      break choice_1;
    }
    if (/^[\n\r\u2028\u2029]/.test(input.charAt(peg$currPos))) {
      r4 = true;
      peg$currPos++;
    } else {
      r4 = peg$FAILED;
    }
    } // choice_1
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discardSourceCharacter();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a8();
    }
    // free r4,r5
    // free p3
    // free p2
    return r1;
  }
  function peg$parseLabeledParameter(silence) {
    var r1,p2,p3,r4,r5,r6,r7,r8,r9,r10,r11,r12,r13,r14;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseIdentifier(silence);
    // label <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 58) {
      r6 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c11); }
      r6 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r7 = peg$discard__();
    if (r7===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 60) {
      r8 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c12); }
      r8 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r9 = peg$discard__();
    if (r9===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 38) {
      r10 = "&";
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c13); }
      r10 = peg$FAILED;
      r10 = null;
    }
    // ampersand <- r10
    r11 = peg$discard__();
    if (r11===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r12 = peg$parseIdentifier(silence);
    // parameter <- r12
    if (r12===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r13 = peg$discard__();
    if (r13===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 62) {
      r14 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c14); }
      r14 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a20(r4, r10, r12);
    }
    // free r5,r6,r7,r8,r9,r11,r13,r14
    // free p3
    // free p2
    return r1;
  }
  function peg$parseLabeledExpression(silence) {
    var r1,p2,p3,r4,r5,r6,r7,r8;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseIdentifier(silence);
    // label <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 58) {
      r6 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c11); }
      r6 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r7 = peg$discard__();
    if (r7===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r8 = peg$parsePrefixedExpression(silence);
    // expression <- r8
    if (r8===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a21(r4, r8);
    }
    // free r5,r6,r7
    // free p3
    // free p2
    return r1;
  }
  function peg$parsePrefixedExpression(silence) {
    var r1,p2,p3,r4,r5,r6;
    choice_1: {
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parsePrefixedOperator(silence);
    // operator <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r6 = peg$parseSuffixedExpression(silence);
    // expression <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a22(r4, r6);
      break choice_1;
    }
    // free r5
    // free p3
    // free p2
    r1 = peg$parseSuffixedExpression(silence);
    } // choice_1
    return r1;
  }
  function peg$discardEscapeCharacter() {
    var r1;
    choice_1: {
    r1 = peg$discardSingleEscapeCharacter();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    if (/^[0-9]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 120) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 117) {
      r1 = true;
      peg$currPos += 1;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseIdentifier(silence) {
    var r1,p2,p3,r4,r5;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$discardReservedWord();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$parseIdentifierName(silence);
    // name <- r5
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a23(r5);
    }
    // free r4
    // free p3
    // free p2
    return r1;
  }
  function peg$parsePrefixedOperator(silence) {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 36) {
      r1 = "$";
      peg$currPos += 1;
      break choice_1;
    } else {
      if (!silence) { peg$fail(peg$c15); }
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 38) {
      r1 = "&";
      peg$currPos += 1;
      break choice_1;
    } else {
      if (!silence) { peg$fail(peg$c13); }
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 33) {
      r1 = "!";
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c16); }
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseSuffixedExpression(silence) {
    var r1,p2,p3,r4,r5,r6;
    choice_1: {
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parsePrimaryExpression(silence);
    // expression <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r6 = peg$parseSuffixedOperator(silence);
    // operator <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a24(r4, r6);
      break choice_1;
    }
    // free r5
    // free p3
    // free p2
    r1 = peg$parsePrimaryExpression(silence);
    } // choice_1
    return r1;
  }
  function peg$discardSingleEscapeCharacter() {
    var r1,p2;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 39) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 34) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 92) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 98) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a14();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 102) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a15();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 110) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a16();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 114) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a17();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 116) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a18();
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 118) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a19();
    } else {
      r1 = peg$FAILED;
    }
    // free p2
    } // choice_1
    return r1;
  }
  function peg$discardReservedWord() {
    var r1;
    choice_1: {
    r1 = peg$discardKeyword();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardFutureReservedWord();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardNullToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardBooleanLiteral();
    } // choice_1
    return r1;
  }
  function peg$parsePrimaryExpression(silence) {
    var r1,p2,p3,r4,r5,r6,r7,r8;
    choice_1: {
    r1 = peg$parseLiteralMatcher(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseCharacterClassMatcher(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseAnyMatcher(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseRuleReferenceExpression(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseSemanticPredicateExpression(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseParameterPredicateExpression(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      r4 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c17); }
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r6 = peg$parseChoiceExpression(silence);
    // expression <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r7 = peg$discard__();
    if (r7===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 41) {
      r8 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c18); }
      r8 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a25(r6);
    }
    // free r4,r5,r7,r8
    // free p3
    // free p2
    } // choice_1
    return r1;
  }
  function peg$parseSuffixedOperator(silence) {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 63) {
      r1 = "?";
      peg$currPos += 1;
      break choice_1;
    } else {
      if (!silence) { peg$fail(peg$c19); }
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 42) {
      r1 = "*";
      peg$currPos += 1;
      break choice_1;
    } else {
      if (!silence) { peg$fail(peg$c20); }
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 43) {
      r1 = "+";
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c21); }
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$discardKeyword() {
    var r1;
    choice_1: {
    r1 = peg$discardBreakToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardCaseToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardCatchToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardContinueToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardDebuggerToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardDefaultToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardDeleteToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardDoToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardElseToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardFinallyToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardForToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardFunctionToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardIfToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardInstanceofToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardInToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardNewToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardReturnToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardSwitchToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardThisToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardThrowToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardTryToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardTypeofToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardVarToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardVoidToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardWhileToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardWithToken();
    } // choice_1
    return r1;
  }
  function peg$discardFutureReservedWord() {
    var r1;
    choice_1: {
    r1 = peg$discardClassToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardConstToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardEnumToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardExportToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardExtendsToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardImportToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardSuperToken();
    } // choice_1
    return r1;
  }
  function peg$discardNullToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "null") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardBooleanLiteral() {
    var r1;
    choice_1: {
    r1 = peg$discardTrueToken();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardFalseToken();
    } // choice_1
    return r1;
  }
  function peg$parseLiteralMatcher(silence) {
    var r1,p2,p3,r4,r5;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseStringLiteral(true);
    // value <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 105) {
      r5 = "i";
      peg$currPos += 1;
    } else {
      r5 = peg$FAILED;
      r5 = null;
    }
    // ignoreCase <- r5
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a26(r4, r5);
    } else {
      if (!silence) { peg$fail(peg$c22); }
    }
    // free p3
    // free p2
    return r1;
  }
  function peg$parseCharacterClassMatcher(silence) {
    var r1,p2,p3,r4,r5,r6,r7,r8;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 94) {
      r5 = "^";
      peg$currPos += 1;
    } else {
      r5 = peg$FAILED;
      r5 = null;
    }
    // inverted <- r5
    r6 = [];
    for (;;) {
      choice_1: {
      r7 = peg$parseClassCharacterRange();
      if (r7!==peg$FAILED) {
        break choice_1;
      }
      r7 = peg$parseClassCharacter();
      } // choice_1
      if (r7!==peg$FAILED) {
        r6.push(r7);
      } else {
        break;
      }
    }
    // parts <- r6
    // free r7
    if (input.charCodeAt(peg$currPos) === 93) {
      r7 = true;
      peg$currPos += 1;
    } else {
      r7 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 105) {
      r8 = "i";
      peg$currPos += 1;
    } else {
      r8 = peg$FAILED;
      r8 = null;
    }
    // ignoreCase <- r8
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a27(r5, r6, r8);
    } else {
      if (!silence) { peg$fail(peg$c23); }
    }
    // free r4,r7
    // free p3
    // free p2
    return r1;
  }
  function peg$parseAnyMatcher(silence) {
    var r1,p2;
    p2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      r1 = true;
      peg$currPos += 1;
      peg$savedPos = p2;
      r1 = peg$a28();
    } else {
      if (!silence) { peg$fail(peg$c24); }
      r1 = peg$FAILED;
    }
    // free p2
    return r1;
  }
  function peg$parseRuleReferenceExpression(silence) {
    var r1,p2,p3,r4,r5,r6,p7,r8,r9,p10,r11,r12;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseIdentifierName(silence);
    // name <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$parseParameterAssignmentBlock(silence);
    if (r5===peg$FAILED) {
      r5 = null;
    }
    // assign <- r5
    p7 = peg$currPos;
    seq_2: {
    r8 = peg$discard__();
    if (r8===peg$FAILED) {
      r6 = peg$FAILED;
      break seq_2;
    }
    seq_3: {
    p10 = peg$currPos;
    r11 = peg$discardStringLiteral();
    if (r11===peg$FAILED) {
      r9 = peg$FAILED;
      break seq_3;
    }
    r12 = peg$discard__();
    if (r12===peg$FAILED) {
      peg$currPos = p10;
      r9 = peg$FAILED;
      break seq_3;
    }
    r9 = true;
    } // seq_3
    if (r9===peg$FAILED) {
      r9 = null;
    }
    // free r11,r12
    // free p10
    if (input.charCodeAt(peg$currPos) === 61) {
      r12 = true;
      peg$currPos += 1;
    } else {
      r12 = peg$FAILED;
      peg$currPos = p7;
      r6 = peg$FAILED;
      break seq_2;
    }
    r6 = true;
    } // seq_2
    // free r8,r9,r12
    if (r6 === peg$FAILED) {
      r6 = void 0;
    } else {
      r6 = peg$FAILED;
      peg$currPos = p7;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p7
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a29(r4, r5);
    }
    // free r6
    // free p3
    // free p2
    return r1;
  }
  function peg$parseSemanticPredicateExpression(silence) {
    var r1,p2,p3,r4,r5,r6;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseSemanticPredicateOperator(silence);
    // operator <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r6 = peg$parseCodeBlock(silence);
    // code <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a30(r4, r6);
    }
    // free r5
    // free p3
    // free p2
    return r1;
  }
  function peg$parseParameterPredicateExpression(silence) {
    var r1,p2,p3,r4,r5,r6,r7,r8,r9,r10;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseParameterPredicateOperator(silence);
    // operator <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 60) {
      r6 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c12); }
      r6 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r7 = peg$discard__();
    if (r7===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r8 = peg$parseIdentifier(silence);
    // parameter <- r8
    if (r8===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r9 = peg$discard__();
    if (r9===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 62) {
      r10 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c14); }
      r10 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a31(r4, r8);
    }
    // free r5,r6,r7,r9,r10
    // free p3
    // free p2
    return r1;
  }
  function peg$discardBreakToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "break") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardCaseToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "case") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardCatchToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "catch") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardContinueToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,8) === "continue") {
      r3 = true;
      peg$currPos += 8;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardDebuggerToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,8) === "debugger") {
      r3 = true;
      peg$currPos += 8;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardDefaultToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,7) === "default") {
      r3 = true;
      peg$currPos += 7;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardDeleteToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,6) === "delete") {
      r3 = true;
      peg$currPos += 6;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardDoToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,2) === "do") {
      r3 = true;
      peg$currPos += 2;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardElseToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "else") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardFinallyToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,7) === "finally") {
      r3 = true;
      peg$currPos += 7;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardForToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,3) === "for") {
      r3 = true;
      peg$currPos += 3;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardFunctionToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,8) === "function") {
      r3 = true;
      peg$currPos += 8;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardIfToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,2) === "if") {
      r3 = true;
      peg$currPos += 2;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardInstanceofToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,10) === "instanceof") {
      r3 = true;
      peg$currPos += 10;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardInToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,2) === "in") {
      r3 = true;
      peg$currPos += 2;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardNewToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,3) === "new") {
      r3 = true;
      peg$currPos += 3;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardReturnToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,6) === "return") {
      r3 = true;
      peg$currPos += 6;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardSwitchToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,6) === "switch") {
      r3 = true;
      peg$currPos += 6;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardThisToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "this") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardThrowToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "throw") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardTryToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,3) === "try") {
      r3 = true;
      peg$currPos += 3;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardTypeofToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,6) === "typeof") {
      r3 = true;
      peg$currPos += 6;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardVarToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,3) === "var") {
      r3 = true;
      peg$currPos += 3;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardVoidToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "void") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardWhileToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "while") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardWithToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "with") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardClassToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "class") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardConstToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "const") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardEnumToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "enum") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardExportToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,6) === "export") {
      r3 = true;
      peg$currPos += 6;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardExtendsToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,7) === "extends") {
      r3 = true;
      peg$currPos += 7;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardImportToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,6) === "import") {
      r3 = true;
      peg$currPos += 6;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardSuperToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "super") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardIdentifierPart() {
    var r1;
    choice_1: {
    r1 = peg$discardIdentifierStart();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$discardUnicodeCombiningMark();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    if (/^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8204) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 8205) {
      r1 = true;
      peg$currPos += 1;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$discardTrueToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,4) === "true") {
      r3 = true;
      peg$currPos += 4;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$discardFalseToken() {
    var r1,p2,r3,r4,p5;
    seq_1: {
    p2 = peg$currPos;
    if (input.substr(peg$currPos,5) === "false") {
      r3 = true;
      peg$currPos += 5;
    } else {
      r3 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    p5 = peg$currPos;
    r4 = peg$discardIdentifierPart();
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p5;
      peg$currPos = p2;
      r1 = peg$FAILED;
      break seq_1;
    }
    // free p5
    r1 = true;
    } // seq_1
    // free r3,r4
    // free p2
    return r1;
  }
  function peg$parseClassCharacterRange() {
    var r1,p2,p3,r4,r5,r6;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    r4 = peg$parseClassCharacter();
    // begin <- r4
    if (r4===peg$FAILED) {
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 45) {
      r5 = true;
      peg$currPos += 1;
    } else {
      r5 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r6 = peg$parseClassCharacter();
    // end <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a32(r4, r6);
    }
    // free r5
    // free p3
    // free p2
    return r1;
  }
  function peg$parseClassCharacter() {
    var r1,p2,p3,r4,r5;
    choice_1: {
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    choice_2: {
    if (input.charCodeAt(peg$currPos) === 93) {
      r4 = true;
      peg$currPos += 1;
      break choice_2;
    } else {
      r4 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 92) {
      r4 = true;
      peg$currPos += 1;
      break choice_2;
    } else {
      r4 = peg$FAILED;
    }
    if (/^[\n\r\u2028\u2029]/.test(input.charAt(peg$currPos))) {
      r4 = true;
      peg$currPos++;
    } else {
      r4 = peg$FAILED;
    }
    } // choice_2
    if (r4 === peg$FAILED) {
      r4 = void 0;
    } else {
      r4 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discardSourceCharacter();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a8();
      break choice_1;
    }
    // free r4,r5
    // free p3
    // free p2
    p2 = peg$currPos;
    seq_2: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      r5 = true;
      peg$currPos += 1;
    } else {
      r5 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_2;
    }
    r4 = peg$parseEscapeSequence();
    // sequence <- r4
    if (r4===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_2;
    }
    r1 = true;
    } // seq_2
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a7(r4);
      break choice_1;
    }
    // free r5
    // free p3
    // free p2
    r1 = peg$parseLineContinuation();
    } // choice_1
    return r1;
  }
  function peg$parseParameterAssignmentBlock(silence) {
    var r1,p2,p3,r4,r5,r6,r7,r8,p9,r10,r11,r12,r13;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 60) {
      r4 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c12); }
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r6 = peg$parseParameterAssignment(silence);
    // first <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r7 = [];
    for (;;) {
      seq_2: {
      p9 = peg$currPos;
      r10 = peg$parse__(silence);
      if (r10===peg$FAILED) {
        r8 = peg$FAILED;
        break seq_2;
      }
      if (input.charCodeAt(peg$currPos) === 44) {
        r11 = ",";
        peg$currPos += 1;
      } else {
        if (!silence) { peg$fail(peg$c25); }
        r11 = peg$FAILED;
        peg$currPos = p9;
        r8 = peg$FAILED;
        break seq_2;
      }
      r12 = peg$parse__(silence);
      if (r12===peg$FAILED) {
        peg$currPos = p9;
        r8 = peg$FAILED;
        break seq_2;
      }
      r13 = peg$parseParameterAssignment(silence);
      if (r13===peg$FAILED) {
        peg$currPos = p9;
        r8 = peg$FAILED;
        break seq_2;
      }
      r8 = [r10,r11,r12,r13];
      } // seq_2
      if (r8!==peg$FAILED) {
        r7.push(r8);
      } else {
        break;
      }
      // free r10,r11,r12,r13
      // free p9
    }
    // rest <- r7
    // free r8
    r8 = peg$discard__();
    if (r8===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    if (input.charCodeAt(peg$currPos) === 62) {
      r13 = true;
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c14); }
      r13 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a33(r6, r7);
    }
    // free r4,r5,r8,r13
    // free p3
    // free p2
    return r1;
  }
  function peg$discardStringLiteral() {
    var r1,p2,p3,r4,r5,r6,r7;
    choice_1: {
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = [];
    for (;;) {
      r6 = peg$parseDoubleStringCharacter();
      if (r6!==peg$FAILED) {
        r5.push(r6);
      } else {
        break;
      }
    }
    // chars <- r5
    // free r6
    if (input.charCodeAt(peg$currPos) === 34) {
      r6 = true;
      peg$currPos += 1;
    } else {
      r6 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a5(r5);
      break choice_1;
    }
    // free r4,r6
    // free p3
    // free p2
    p2 = peg$currPos;
    seq_2: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 39) {
      r6 = true;
      peg$currPos += 1;
    } else {
      r6 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_2;
    }
    r4 = [];
    for (;;) {
      r7 = peg$parseSingleStringCharacter();
      if (r7!==peg$FAILED) {
        r4.push(r7);
      } else {
        break;
      }
    }
    // chars <- r4
    // free r7
    if (input.charCodeAt(peg$currPos) === 39) {
      r7 = true;
      peg$currPos += 1;
    } else {
      r7 = peg$FAILED;
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_2;
    }
    r1 = true;
    } // seq_2
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a5(r4);
    }
    // free r6,r7
    // free p3
    // free p2
    } // choice_1
    return r1;
  }
  function peg$parseSemanticPredicateOperator(silence) {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 38) {
      r1 = "&";
      peg$currPos += 1;
      break choice_1;
    } else {
      if (!silence) { peg$fail(peg$c13); }
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 33) {
      r1 = "!";
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c16); }
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseParameterPredicateOperator(silence) {
    var r1;
    choice_1: {
    if (input.charCodeAt(peg$currPos) === 38) {
      r1 = "&";
      peg$currPos += 1;
      break choice_1;
    } else {
      if (!silence) { peg$fail(peg$c13); }
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 33) {
      r1 = "!";
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c16); }
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$discardIdentifierStart() {
    var r1,p2,p3,r4,r5;
    choice_1: {
    r1 = peg$discardUnicodeLetter();
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    if (input.charCodeAt(peg$currPos) === 36) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (input.charCodeAt(peg$currPos) === 95) {
      r1 = true;
      peg$currPos += 1;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      r4 = true;
      peg$currPos += 1;
    } else {
      r4 = peg$FAILED;
      r1 = peg$FAILED;
      break seq_1;
    }
    r5 = peg$parseUnicodeEscapeSequence();
    // sequence <- r5
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a7(r5);
    }
    // free r4
    // free p3
    // free p2
    } // choice_1
    return r1;
  }
  function peg$discardUnicodeCombiningMark() {
    var r1;
    choice_1: {
    if (/^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u08FE\u0900-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1DC0-\u1DE6\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE26]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u19B0-\u19C0\u19C8-\u19C9\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BAC-\u1BAD\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseParameterAssignment(silence) {
    var r1,p2,p3,r4,r5,r6,r7,r8,p9,r10,r11,r12;
    p2 = peg$currPos;
    seq_1: {
    p3 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      r4 = "&";
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c13); }
      r4 = peg$FAILED;
      r4 = null;
    }
    // ampersand <- r4
    r5 = peg$discard__();
    if (r5===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r6 = peg$parseIdentifier(silence);
    // name <- r6
    if (r6===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    r7 = peg$discard__();
    if (r7===peg$FAILED) {
      peg$currPos = p3;
      r1 = peg$FAILED;
      break seq_1;
    }
    choice_1: {
    seq_2: {
    p9 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      r10 = "=";
      peg$currPos += 1;
    } else {
      if (!silence) { peg$fail(peg$c1); }
      r10 = peg$FAILED;
      r8 = peg$FAILED;
      break seq_2;
    }
    r11 = peg$parse__(silence);
    if (r11===peg$FAILED) {
      peg$currPos = p9;
      r8 = peg$FAILED;
      break seq_2;
    }
    r12 = peg$parseParameterValue(silence);
    if (r12===peg$FAILED) {
      peg$currPos = p9;
      r8 = peg$FAILED;
      break seq_2;
    }
    r8 = [r10,r11,r12];
    } // seq_2
    if (r8!==peg$FAILED) {
      break choice_1;
    }
    // free r10,r11,r12
    // free p9
    r8 = peg$parseParameterIncrement(silence);
    } // choice_1
    if (r8===peg$FAILED) {
      r8 = null;
    }
    // assign <- r8
    r1 = true;
    } // seq_1
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a34(r4, r6, r8);
    }
    // free r5,r7
    // free p3
    // free p2
    return r1;
  }
  function peg$discardUnicodeLetter() {
    var r1;
    choice_1: {
    if (/^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA\uFF21-\uFF3A]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uAA70\uAADD\uAAF3-\uAAF4\uFF70\uFF9E-\uFF9F]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0977\u0979-\u097F\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58-\u0C59\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
      break choice_1;
    } else {
      r1 = peg$FAILED;
    }
    if (/^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/.test(input.charAt(peg$currPos))) {
      r1 = true;
      peg$currPos++;
    } else {
      r1 = peg$FAILED;
    }
    } // choice_1
    return r1;
  }
  function peg$parseParameterValue(silence) {
    var r1;
    choice_1: {
    r1 = peg$parseParameterValueBoolean(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseParameterValueInteger(silence);
    if (r1!==peg$FAILED) {
      break choice_1;
    }
    r1 = peg$parseParameterValueString(silence);
    } // choice_1
    return r1;
  }
  function peg$parseParameterIncrement(silence) {
    var r1,p2;
    p2 = peg$currPos;
    if (input.substr(peg$currPos,2) === "++") {
      r1 = true;
      peg$currPos += 2;
      peg$savedPos = p2;
      r1 = peg$a35();
    } else {
      if (!silence) { peg$fail(peg$c26); }
      r1 = peg$FAILED;
    }
    // free p2
    return r1;
  }
  function peg$parseParameterValueBoolean(silence) {
    var r1,p2,r3,p4;
    p2 = peg$currPos;
    p4 = peg$currPos;
    r3 = peg$discardBooleanLiteral();
    // value <- r3
    if (r3!==peg$FAILED) {
      r3 = input.substring(p4, peg$currPos);
    } else {
      r3 = peg$FAILED;
    }
    // free p4
    r1 = r3;
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a36(r3);
    }
    // free p2
    return r1;
  }
  function peg$parseParameterValueInteger(silence) {
    var r1,p2,r3,p4;
    p2 = peg$currPos;
    p4 = peg$currPos;
    r3 = /[0-9]+/y;
    r3.lastIndex = peg$currPos;
    // value <- r3
    if (r3.exec(input) !== null) {
      peg$currPos = r3.lastIndex;
      r3 = input.substring(p4, peg$currPos);
    } else {
      r3 = peg$FAILED;
      if (!silence) { peg$fail(peg$c27); }
      r3 = peg$FAILED;
    }
    // free p4
    r1 = r3;
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a37(r3);
    }
    // free p2
    return r1;
  }
  function peg$parseParameterValueString(silence) {
    var r1,p2,r3;
    p2 = peg$currPos;
    r3 = peg$parseStringLiteral(silence);
    // value <- r3
    r1 = r3;
    if (r1!==peg$FAILED) {
      peg$savedPos = p2;
      r1 = peg$a38(r3);
    }
    // free p2
    return r1;
  }

  // start

  if (options.stream) {
    switch (peg$startRule) {
      
      default:
        throw new Error(`Can't stream rule "${peg$startRule}".`);
    }
  } else {
    switch (peg$startRule) {
      case '(DEFAULT)':
      case "Grammar":
        peg$result = peg$parseGrammar(false);
        break;
      default:
        throw new Error(`Can't start parsing from rule "${peg$startRule}".`);
    }
  }

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$c0);
    }
    throw peg$buildParseException();
  }
}

return {
  SyntaxError:   peg$SyntaxError,
  DefaultTracer: peg$DefaultTracer,
  parse: peg$parse
};

})();

